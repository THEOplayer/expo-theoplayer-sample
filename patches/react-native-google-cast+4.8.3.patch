diff --git a/node_modules/react-native-google-cast/lib/commonjs/plugin/withAndroidGoogleCast.js b/node_modules/react-native-google-cast/lib/commonjs/plugin/withAndroidGoogleCast.js
index 4b939d8..b94407e 100644
--- a/node_modules/react-native-google-cast/lib/commonjs/plugin/withAndroidGoogleCast.js
+++ b/node_modules/react-native-google-cast/lib/commonjs/plugin/withAndroidGoogleCast.js
@@ -174,13 +174,18 @@ function addSafeExtGet(src) {
 function addGoogleCastVersionImport(src, {
   version
 } = {}) {
-  const newSrc = [];
-  newSrc.push(`        castFrameworkVersion = "${version}"`);
+  const newSrc = [`        castFrameworkVersion = "${version}"`];
+  const hasExtBlock = src.match(/ext(?:\s+)?\{/);
+  const anchor = hasExtBlock ? /ext(?:\s+)?\{/ : /buildscript(?:\s+)?\{/;
+  if (!hasExtBlock) {
+    newSrc.unshift('  ext {');
+    newSrc.push('  }');
+  }
   return (0, _generateCode.mergeContents)({
-    tag: 'react-native-google-cast-version',
+    tag: 'react-native-google-cast-version-import',
     src,
     newSrc: newSrc.join('\n'),
-    anchor: /ext(?:\s+)?\{/,
+    anchor,
     offset: 1,
     comment: '//'
   });
diff --git a/node_modules/react-native-google-cast/lib/commonjs/plugin/withAndroidGoogleCast.js.map b/node_modules/react-native-google-cast/lib/commonjs/plugin/withAndroidGoogleCast.js.map
index b60b551..9d47ad2 100644
--- a/node_modules/react-native-google-cast/lib/commonjs/plugin/withAndroidGoogleCast.js.map
+++ b/node_modules/react-native-google-cast/lib/commonjs/plugin/withAndroidGoogleCast.js.map
@@ -1 +1 @@
-{"version":3,"names":["_configPlugins","require","_codeMod","_generateCode","addMetaDataItemToMainApplication","getMainApplicationOrThrow","AndroidConfig","Manifest","META_PROVIDER_CLASS","META_RECEIVER_APP_ID","MAIN_ACTIVITY_LANGUAGES","java","code","anchor","kt","EXPANDED_CONTROLLER_ACTIVITY","ensureExpandedControllerActivity","mainApplication","Array","isArray","activity","filter","_activity$$","$","push","withAndroidManifestCast","config","expandedController","receiverAppId","withAndroidManifest","config_","modResults","withProjectBuildGradleVersion","version","withProjectBuildGradle","language","Error","contents","addGoogleCastVersionImport","withAppBuildGradleImport","withAppBuildGradle","addSafeExtGet","addGoogleCastImport","withMainActivityLazyLoading","withMainActivity","src","addImports","addGoogleCastLazyLoadingImport","withAndroidGoogleCast","props","androidPlayServicesCastFrameworkVersion","exports","mainActivity","newSrc","mergeContents","tag","join","offset","comment","removeContents","match"],"sources":["withAndroidGoogleCast.ts"],"sourcesContent":["import {\n  AndroidConfig,\n  ConfigPlugin,\n  withAndroidManifest,\n  withAppBuildGradle,\n  withMainActivity,\n  withProjectBuildGradle,\n} from '@expo/config-plugins'\nimport { addImports } from '@expo/config-plugins/build/android/codeMod'\nimport {\n  mergeContents,\n  removeContents,\n} from '@expo/config-plugins/build/utils/generateCode'\n\nconst { addMetaDataItemToMainApplication, getMainApplicationOrThrow } =\n  AndroidConfig.Manifest\n\nconst META_PROVIDER_CLASS =\n  'com.google.android.gms.cast.framework.OPTIONS_PROVIDER_CLASS_NAME'\nconst META_RECEIVER_APP_ID =\n  'com.reactnative.googlecast.RECEIVER_APPLICATION_ID'\n\nconst MAIN_ACTIVITY_LANGUAGES: Record<\n  'java' | 'kt',\n  { code: string; anchor: RegExp }\n> = {\n  java: {\n    code: 'CastContext.getSharedInstance(this)',\n    anchor: /super\\.onCreate\\(\\w+\\)/,\n  },\n  kt: {\n    code: 'CastContext.getSharedInstance(this)',\n    anchor: /super\\.onCreate\\(\\w+\\)/,\n  },\n}\n\ntype Props = {\n  expandedController?: boolean\n  receiverAppId?: string\n}\n\nconst EXPANDED_CONTROLLER_ACTIVITY =\n  'com.reactnative.googlecast.RNGCExpandedControllerActivity'\n\nasync function ensureExpandedControllerActivity({\n  mainApplication,\n}: {\n  mainApplication: AndroidConfig.Manifest.ManifestApplication\n}) {\n  if (Array.isArray(mainApplication.activity)) {\n    // If the expanded controller activity is already added\n    mainApplication.activity = mainApplication.activity.filter((activity) => {\n      return activity.$?.['android:name'] !== EXPANDED_CONTROLLER_ACTIVITY\n    })\n  } else {\n    mainApplication.activity = []\n  }\n\n  // adds `<activity android:name=\"${EXPANDED_CONTROLLER_ACTIVITY}\" />` to the manifest\n  mainApplication.activity.push({\n    $: {\n      'android:name': EXPANDED_CONTROLLER_ACTIVITY,\n    },\n  })\n  return mainApplication\n}\n\nconst withAndroidManifestCast: ConfigPlugin<Props> = (\n  config,\n  { expandedController, receiverAppId } = {}\n) => {\n  return withAndroidManifest(config, async (config_) => {\n    const mainApplication = getMainApplicationOrThrow(config_.modResults)\n\n    if (expandedController) {\n      ensureExpandedControllerActivity({ mainApplication })\n    }\n\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      META_PROVIDER_CLASS,\n      // This is the native Java class\n      'com.reactnative.googlecast.GoogleCastOptionsProvider'\n    )\n    if (receiverAppId) {\n      addMetaDataItemToMainApplication(\n        mainApplication,\n        META_RECEIVER_APP_ID,\n        receiverAppId\n      )\n    }\n    return config_\n  })\n}\n\nconst withProjectBuildGradleVersion: ConfigPlugin<{ version?: string }> = (\n  config,\n  { version }\n) => {\n  return withProjectBuildGradle(config, (config_) => {\n    if (config_.modResults.language !== 'groovy')\n      throw new Error(\n        'react-native-google-cast config plugin does not support Kotlin /build.gradle yet.'\n      )\n    config_.modResults.contents = addGoogleCastVersionImport(\n      config_.modResults.contents,\n      {\n        version,\n      }\n    ).contents\n\n    return config_\n  })\n}\n\nconst withAppBuildGradleImport: ConfigPlugin<{ version?: string }> = (\n  config,\n  { version }\n) => {\n  return withAppBuildGradle(config, (config_) => {\n    if (config_.modResults.language !== 'groovy')\n      throw new Error(\n        'react-native-google-cast config plugin does not support Kotlin app/build.gradle yet.'\n      )\n    config_.modResults.contents = addSafeExtGet(config_.modResults.contents)\n\n    config_.modResults.contents = addGoogleCastImport(\n      config_.modResults.contents,\n      {\n        version,\n      }\n    ).contents\n\n    return config_\n  })\n}\n\nconst withMainActivityLazyLoading: ConfigPlugin = (config) => {\n  return withMainActivity(config, async (config_) => {\n    const src = addImports(\n      config_.modResults.contents,\n      ['com.google.android.gms.cast.framework.CastContext'],\n      config_.modResults.language === 'java'\n    )\n\n    config_.modResults.contents = addGoogleCastLazyLoadingImport(\n      src,\n      config_.modResults.language\n    ).contents\n\n    return config_\n  })\n}\n\n// castFrameworkVersion\nexport const withAndroidGoogleCast: ConfigPlugin<{\n  /**\n   * @default '+'\n   */\n  androidPlayServicesCastFrameworkVersion?: string\n\n  expandedController?: boolean\n\n  /**\n   * ??\n   */\n  receiverAppId?: string\n}> = (config, props) => {\n  config = withAndroidManifestCast(config, {\n    expandedController: props.expandedController,\n    receiverAppId: props.receiverAppId,\n  })\n  config = withMainActivityLazyLoading(config)\n\n  config = withProjectBuildGradleVersion(config, {\n    // gradle dep version\n    version: props.androidPlayServicesCastFrameworkVersion ?? '+',\n  })\n  config = withAppBuildGradleImport(config, {\n    // gradle dep version\n    version: props.androidPlayServicesCastFrameworkVersion ?? '+',\n  })\n\n  return config\n}\n\nfunction addGoogleCastLazyLoadingImport(\n  src: string,\n  language: keyof typeof MAIN_ACTIVITY_LANGUAGES\n) {\n  const mainActivity = MAIN_ACTIVITY_LANGUAGES[language]\n  if (!mainActivity) {\n    throw new Error(\n      `react-native-google-cast config plugin does not support MainActivity.${language} yet`\n    )\n  }\n\n  const newSrc = []\n  newSrc.push(`    ${mainActivity.code}`)\n\n  return mergeContents({\n    tag: 'react-native-google-cast-onCreate',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: mainActivity.anchor,\n    offset: 1,\n    comment: '//',\n  })\n}\n\n// TODO: Add this ability to autolinking\n// dependencies { implementation \"com.google.android.gms:play-services-cast-framework:+\" }\nfunction addGoogleCastImport(\n  src: string,\n  { version }: { version?: string } = {}\n) {\n  const newSrc = []\n\n  newSrc.push(\n    `    implementation \"com.google.android.gms:play-services-cast-framework:\\${safeExtGet('castFrameworkVersion', '${version}')}\"`\n  )\n\n  return mergeContents({\n    tag: 'react-native-google-cast-dependencies',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /dependencies(?:\\s+)?\\{/,\n    offset: 1,\n    comment: '//',\n  })\n}\n\nfunction addSafeExtGet(src: string) {\n  const tag = 'safeExtGet'\n\n  src = removeContents({ src, tag }).contents\n\n  // If the source already has a safeExtGet method after removing this one, then go with the existing one.\n  if (src.match(/def(?:\\s+)?safeExtGet\\(/)) {\n    return src\n  }\n  // Otherwise add a new one\n  const newSrc = []\n  newSrc.push(\n    'def safeExtGet(prop, fallback) {',\n    '  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback',\n    '}'\n  )\n\n  return mergeContents({\n    tag: 'safeExtGet',\n    src,\n    newSrc: newSrc.join('\\n'),\n    // This block can go anywhere in the upper scope\n    anchor: /apply plugin/,\n    offset: 1,\n    comment: '//',\n  }).contents\n}\n\nfunction addGoogleCastVersionImport(\n  src: string,\n  { version }: { version?: string } = {}\n) {\n  const newSrc = []\n  newSrc.push(`        castFrameworkVersion = \"${version}\"`)\n\n  return mergeContents({\n    tag: 'react-native-google-cast-version',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /ext(?:\\s+)?\\{/,\n    offset: 1,\n    comment: '//',\n  })\n}\n"],"mappings":"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","ignoreList":[]}
\ No newline at end of file
+{"version":3,"names":["_configPlugins","require","_codeMod","_generateCode","addMetaDataItemToMainApplication","getMainApplicationOrThrow","AndroidConfig","Manifest","META_PROVIDER_CLASS","META_RECEIVER_APP_ID","MAIN_ACTIVITY_LANGUAGES","java","code","anchor","kt","EXPANDED_CONTROLLER_ACTIVITY","ensureExpandedControllerActivity","mainApplication","Array","isArray","activity","filter","_activity$$","$","push","withAndroidManifestCast","config","expandedController","receiverAppId","withAndroidManifest","config_","modResults","withProjectBuildGradleVersion","version","withProjectBuildGradle","language","Error","contents","addGoogleCastVersionImport","withAppBuildGradleImport","withAppBuildGradle","addSafeExtGet","addGoogleCastImport","withMainActivityLazyLoading","withMainActivity","src","addImports","addGoogleCastLazyLoadingImport","withAndroidGoogleCast","props","androidPlayServicesCastFrameworkVersion","exports","mainActivity","newSrc","mergeContents","tag","join","offset","comment","removeContents","match","hasExtBlock","unshift"],"sources":["withAndroidGoogleCast.ts"],"sourcesContent":["import {\n  AndroidConfig,\n  ConfigPlugin,\n  withAndroidManifest,\n  withAppBuildGradle,\n  withMainActivity,\n  withProjectBuildGradle,\n} from '@expo/config-plugins'\nimport { addImports } from '@expo/config-plugins/build/android/codeMod'\nimport {\n  mergeContents,\n  removeContents,\n} from '@expo/config-plugins/build/utils/generateCode'\n\nconst { addMetaDataItemToMainApplication, getMainApplicationOrThrow } =\n  AndroidConfig.Manifest\n\nconst META_PROVIDER_CLASS =\n  'com.google.android.gms.cast.framework.OPTIONS_PROVIDER_CLASS_NAME'\nconst META_RECEIVER_APP_ID =\n  'com.reactnative.googlecast.RECEIVER_APPLICATION_ID'\n\nconst MAIN_ACTIVITY_LANGUAGES: Record<\n  'java' | 'kt',\n  { code: string; anchor: RegExp }\n> = {\n  java: {\n    code: 'CastContext.getSharedInstance(this)',\n    anchor: /super\\.onCreate\\(\\w+\\)/,\n  },\n  kt: {\n    code: 'CastContext.getSharedInstance(this)',\n    anchor: /super\\.onCreate\\(\\w+\\)/,\n  },\n}\n\ntype Props = {\n  expandedController?: boolean\n  receiverAppId?: string\n}\n\nconst EXPANDED_CONTROLLER_ACTIVITY =\n  'com.reactnative.googlecast.RNGCExpandedControllerActivity'\n\nasync function ensureExpandedControllerActivity({\n  mainApplication,\n}: {\n  mainApplication: AndroidConfig.Manifest.ManifestApplication\n}) {\n  if (Array.isArray(mainApplication.activity)) {\n    // If the expanded controller activity is already added\n    mainApplication.activity = mainApplication.activity.filter((activity) => {\n      return activity.$?.['android:name'] !== EXPANDED_CONTROLLER_ACTIVITY\n    })\n  } else {\n    mainApplication.activity = []\n  }\n\n  // adds `<activity android:name=\"${EXPANDED_CONTROLLER_ACTIVITY}\" />` to the manifest\n  mainApplication.activity.push({\n    $: {\n      'android:name': EXPANDED_CONTROLLER_ACTIVITY,\n    },\n  })\n  return mainApplication\n}\n\nconst withAndroidManifestCast: ConfigPlugin<Props> = (\n  config,\n  { expandedController, receiverAppId } = {}\n) => {\n  return withAndroidManifest(config, async (config_) => {\n    const mainApplication = getMainApplicationOrThrow(config_.modResults)\n\n    if (expandedController) {\n      ensureExpandedControllerActivity({ mainApplication })\n    }\n\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      META_PROVIDER_CLASS,\n      // This is the native Java class\n      'com.reactnative.googlecast.GoogleCastOptionsProvider'\n    )\n    if (receiverAppId) {\n      addMetaDataItemToMainApplication(\n        mainApplication,\n        META_RECEIVER_APP_ID,\n        receiverAppId\n      )\n    }\n    return config_\n  })\n}\n\nconst withProjectBuildGradleVersion: ConfigPlugin<{ version?: string }> = (\n  config,\n  { version }\n) => {\n  return withProjectBuildGradle(config, (config_) => {\n    if (config_.modResults.language !== 'groovy')\n      throw new Error(\n        'react-native-google-cast config plugin does not support Kotlin /build.gradle yet.'\n      )\n    config_.modResults.contents = addGoogleCastVersionImport(\n      config_.modResults.contents,\n      {\n        version,\n      }\n    ).contents\n\n    return config_\n  })\n}\n\nconst withAppBuildGradleImport: ConfigPlugin<{ version?: string }> = (\n  config,\n  { version }\n) => {\n  return withAppBuildGradle(config, (config_) => {\n    if (config_.modResults.language !== 'groovy')\n      throw new Error(\n        'react-native-google-cast config plugin does not support Kotlin app/build.gradle yet.'\n      )\n    config_.modResults.contents = addSafeExtGet(config_.modResults.contents)\n\n    config_.modResults.contents = addGoogleCastImport(\n      config_.modResults.contents,\n      {\n        version,\n      }\n    ).contents\n\n    return config_\n  })\n}\n\nconst withMainActivityLazyLoading: ConfigPlugin = (config) => {\n  return withMainActivity(config, async (config_) => {\n    const src = addImports(\n      config_.modResults.contents,\n      ['com.google.android.gms.cast.framework.CastContext'],\n      config_.modResults.language === 'java'\n    )\n\n    config_.modResults.contents = addGoogleCastLazyLoadingImport(\n      src,\n      config_.modResults.language\n    ).contents\n\n    return config_\n  })\n}\n\n// castFrameworkVersion\nexport const withAndroidGoogleCast: ConfigPlugin<{\n  /**\n   * @default '+'\n   */\n  androidPlayServicesCastFrameworkVersion?: string\n\n  expandedController?: boolean\n\n  /**\n   * ??\n   */\n  receiverAppId?: string\n}> = (config, props) => {\n  config = withAndroidManifestCast(config, {\n    expandedController: props.expandedController,\n    receiverAppId: props.receiverAppId,\n  })\n  config = withMainActivityLazyLoading(config)\n\n  config = withProjectBuildGradleVersion(config, {\n    // gradle dep version\n    version: props.androidPlayServicesCastFrameworkVersion ?? '+',\n  })\n  config = withAppBuildGradleImport(config, {\n    // gradle dep version\n    version: props.androidPlayServicesCastFrameworkVersion ?? '+',\n  })\n\n  return config\n}\n\nfunction addGoogleCastLazyLoadingImport(\n  src: string,\n  language: keyof typeof MAIN_ACTIVITY_LANGUAGES\n) {\n  const mainActivity = MAIN_ACTIVITY_LANGUAGES[language]\n  if (!mainActivity) {\n    throw new Error(\n      `react-native-google-cast config plugin does not support MainActivity.${language} yet`\n    )\n  }\n\n  const newSrc = []\n  newSrc.push(`    ${mainActivity.code}`)\n\n  return mergeContents({\n    tag: 'react-native-google-cast-onCreate',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: mainActivity.anchor,\n    offset: 1,\n    comment: '//',\n  })\n}\n\n// TODO: Add this ability to autolinking\n// dependencies { implementation \"com.google.android.gms:play-services-cast-framework:+\" }\nfunction addGoogleCastImport(\n  src: string,\n  { version }: { version?: string } = {}\n) {\n  const newSrc = []\n\n  newSrc.push(\n    `    implementation \"com.google.android.gms:play-services-cast-framework:\\${safeExtGet('castFrameworkVersion', '${version}')}\"`\n  )\n\n  return mergeContents({\n    tag: 'react-native-google-cast-dependencies',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /dependencies(?:\\s+)?\\{/,\n    offset: 1,\n    comment: '//',\n  })\n}\n\nfunction addSafeExtGet(src: string) {\n  const tag = 'safeExtGet'\n\n  src = removeContents({ src, tag }).contents\n\n  // If the source already has a safeExtGet method after removing this one, then go with the existing one.\n  if (src.match(/def(?:\\s+)?safeExtGet\\(/)) {\n    return src\n  }\n  // Otherwise add a new one\n  const newSrc = []\n  newSrc.push(\n    'def safeExtGet(prop, fallback) {',\n    '  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback',\n    '}'\n  )\n\n  return mergeContents({\n    tag: 'safeExtGet',\n    src,\n    newSrc: newSrc.join('\\n'),\n    // This block can go anywhere in the upper scope\n    anchor: /apply plugin/,\n    offset: 1,\n    comment: '//',\n  }).contents\n}\n\nfunction addGoogleCastVersionImport(\n  src: string,\n  { version }: { version?: string } = {}\n) {\n  const newSrc = [`        castFrameworkVersion = \"${version}\"`]\n  const hasExtBlock = src.match(/ext(?:\\s+)?\\{/)\n  const anchor = hasExtBlock ? /ext(?:\\s+)?\\{/ : /buildscript(?:\\s+)?\\{/\n\n  if (!hasExtBlock) {\n    newSrc.unshift('  ext {')\n    newSrc.push('  }')\n  }\n\n  return mergeContents({\n    tag: 'react-native-google-cast-version-import',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor,\n    offset: 1,\n    comment: '//',\n  })\n}\n"],"mappings":"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","ignoreList":[]}
\ No newline at end of file
diff --git a/node_modules/react-native-google-cast/lib/commonjs/plugin/withIosGoogleCast.js b/node_modules/react-native-google-cast/lib/commonjs/plugin/withIosGoogleCast.js
index 5a41096..5381b51 100644
--- a/node_modules/react-native-google-cast/lib/commonjs/plugin/withIosGoogleCast.js
+++ b/node_modules/react-native-google-cast/lib/commonjs/plugin/withIosGoogleCast.js
@@ -5,9 +5,11 @@ Object.defineProperty(exports, "__esModule", {
 });
 exports.MATCH_INIT = void 0;
 exports.addGoogleCastAppDelegateDidFinishLaunchingWithOptions = addGoogleCastAppDelegateDidFinishLaunchingWithOptions;
+exports.addSwiftGoogleCastAppDelegateDidFinishLaunchingWithOptions = addSwiftGoogleCastAppDelegateDidFinishLaunchingWithOptions;
 exports.withIosGoogleCast = void 0;
 var _generateCode = require("@expo/config-plugins/build/utils/generateCode");
 var _configPlugins = require("@expo/config-plugins");
+var _codeMod = require("@expo/config-plugins/build/ios/codeMod");
 const LOCAL_NETWORK_USAGE = '${PRODUCT_NAME} uses the local network to discover Cast-enabled devices on your WiFi network';
 
 /**
@@ -40,11 +42,13 @@ const withIosLocalNetworkPermissions = (config, {
 // TODO: Use AppDelegate swizzling
 const withIosAppDelegateLoaded = (config, props) => {
   return (0, _configPlugins.withAppDelegate)(config, config_ => {
-    if (!['objc', 'objcpp'].includes(config_.modResults.language)) {
-      throw new Error("react-native-google-cast config plugin does not support AppDelegates that aren't Objective-C(++) yet.");
+    if (config_.modResults.language === 'swift') {
+      config_.modResults.contents = addSwiftGoogleCastAppDelegateDidFinishLaunchingWithOptions(config_.modResults.contents, props);
+      config_.modResults.contents = addSwiftGoogleCastAppDelegateImport(config_.modResults.contents).contents;
+    } else if (config_.modResults.language === 'objc' || config_.modResults.language === 'objcpp') {
+      config_.modResults.contents = addGoogleCastAppDelegateDidFinishLaunchingWithOptions(config_.modResults.contents, props).contents;
+      config_.modResults.contents = addGoogleCastAppDelegateImport(config_.modResults.contents).contents;
     }
-    config_.modResults.contents = addGoogleCastAppDelegateDidFinishLaunchingWithOptions(config_.modResults.contents, props).contents;
-    config_.modResults.contents = addGoogleCastAppDelegateImport(config_.modResults.contents).contents;
     return config_;
   });
 };
@@ -100,4 +104,32 @@ function addGoogleCastAppDelegateImport(src) {
     comment: '//'
   });
 }
+function addSwiftGoogleCastAppDelegateImport(src) {
+  const newSrc = [];
+  newSrc.push('#if canImport(GoogleCast)', 'import GoogleCast', '#endif');
+  return (0, _generateCode.mergeContents)({
+    tag: 'react-native-google-cast-import',
+    src,
+    newSrc: newSrc.join('\n'),
+    anchor: /import React/,
+    offset: 0,
+    comment: '//'
+  });
+}
+function addSwiftGoogleCastAppDelegateDidFinishLaunchingWithOptions(src, {
+  disableDiscoveryAutostart = false,
+  expandedController = false,
+  receiverAppId = null,
+  startDiscoveryAfterFirstTapOnCastButton = true,
+  suspendSessionsWhenBackgrounded = true
+} = {}) {
+  let newSrc = [];
+  newSrc.push(
+  // For extra safety
+  '#if canImport(GoogleCast)', `    let receiverAppID = ${receiverAppId ? `"${receiverAppId}"` : 'kGCKDefaultMediaReceiverApplicationID'}`, '    let criteria = GCKDiscoveryCriteria(applicationID: receiverAppID)', '    let options = GCKCastOptions(discoveryCriteria: criteria)', `    options.disableDiscoveryAutostart = ${String(!!disableDiscoveryAutostart)}`, `    options.startDiscoveryAfterFirstTapOnCastButton = ${String(!!startDiscoveryAfterFirstTapOnCastButton)}`, `    options.suspendSessionsWhenBackgrounded = ${String(!!suspendSessionsWhenBackgrounded)}`, '    GCKCastContext.setSharedInstanceWith(options)', `    GCKCastContext.sharedInstance().useDefaultExpandedMediaControls = ${String(!!expandedController)}`, '#endif');
+  newSrc = newSrc.filter(Boolean);
+  return (0, _codeMod.insertContentsInsideSwiftFunctionBlock)(src, 'application didFinishLaunchingWithOptions:', newSrc.join('\n'), {
+    position: 'tailBeforeLastReturn'
+  });
+}
 //# sourceMappingURL=withIosGoogleCast.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-google-cast/lib/commonjs/plugin/withIosGoogleCast.js.map b/node_modules/react-native-google-cast/lib/commonjs/plugin/withIosGoogleCast.js.map
index 1064866..ba53a47 100644
--- a/node_modules/react-native-google-cast/lib/commonjs/plugin/withIosGoogleCast.js.map
+++ b/node_modules/react-native-google-cast/lib/commonjs/plugin/withIosGoogleCast.js.map
@@ -1 +1 @@
-{"version":3,"names":["_generateCode","require","_configPlugins","LOCAL_NETWORK_USAGE","withIosLocalNetworkPermissions","config","receiverAppId","withInfoPlist","config_","Array","isArray","modResults","NSBonjourServices","push","Set","NSLocalNetworkUsageDescription","withIosAppDelegateLoaded","props","withAppDelegate","includes","language","Error","contents","addGoogleCastAppDelegateDidFinishLaunchingWithOptions","addGoogleCastAppDelegateImport","withIosGoogleCast","disableDiscoveryAutostart","expandedController","startDiscoveryAfterFirstTapOnCastButton","suspendSessionsWhenBackgrounded","exports","MATCH_INIT","src","newSrc","String","filter","Boolean","mergeContents","tag","join","anchor","offset","comment"],"sources":["withIosGoogleCast.ts"],"sourcesContent":["import { mergeContents } from '@expo/config-plugins/build/utils/generateCode'\nimport {\n  ConfigPlugin,\n  withAppDelegate,\n  withInfoPlist,\n} from '@expo/config-plugins'\n\nconst LOCAL_NETWORK_USAGE =\n  '${PRODUCT_NAME} uses the local network to discover Cast-enabled devices on your WiFi network'\n\n/**\n * On iOS, a dialog asking the user for the local network permission will now be displayed immediately when the app is opened.\n *\n * @param {*} config\n * @param {*} props.receiverAppId If using a custom receiver, make sure to replace `CC1AD845` with your custom receiver app id.\n * @returns\n */\nconst withIosLocalNetworkPermissions: ConfigPlugin<{\n  receiverAppId?: string\n}> = (config, { receiverAppId = 'CC1AD845' } = {}) => {\n  return withInfoPlist(config, (config_) => {\n    if (!Array.isArray(config_.modResults.NSBonjourServices)) {\n      config_.modResults.NSBonjourServices = []\n    }\n    // Add required values\n    config_.modResults.NSBonjourServices.push(\n      '_googlecast._tcp',\n      `_${receiverAppId}._googlecast._tcp`\n    )\n\n    // Remove duplicates\n    config_.modResults.NSBonjourServices = [\n      ...new Set(config_.modResults.NSBonjourServices),\n    ]\n\n    // For iOS 14+, you need to add local network permissions to Info.plist:\n    // https://developers.google.com/cast/docs/ios_sender/ios_permissions_changes#updating_your_app_on_ios_14\n    config_.modResults.NSLocalNetworkUsageDescription =\n      config_.modResults.NSLocalNetworkUsageDescription || LOCAL_NETWORK_USAGE\n    return config_\n  })\n}\n\n// TODO: Use AppDelegate swizzling\nconst withIosAppDelegateLoaded: ConfigPlugin<IosProps> = (config, props) => {\n  return withAppDelegate(config, (config_) => {\n    if (!['objc', 'objcpp'].includes(config_.modResults.language)) {\n      throw new Error(\n        \"react-native-google-cast config plugin does not support AppDelegates that aren't Objective-C(++) yet.\"\n      )\n    }\n    config_.modResults.contents =\n      addGoogleCastAppDelegateDidFinishLaunchingWithOptions(\n        config_.modResults.contents,\n        props\n      ).contents\n    config_.modResults.contents = addGoogleCastAppDelegateImport(\n      config_.modResults.contents\n    ).contents\n\n    return config_\n  })\n}\n\nexport const withIosGoogleCast: ConfigPlugin<{\n  disableDiscoveryAutostart?: boolean\n  expandedController?: boolean\n  receiverAppId?: string\n  startDiscoveryAfterFirstTapOnCastButton?: boolean\n  suspendSessionsWhenBackgrounded?: boolean\n}> = (config, props) => {\n  config = withIosLocalNetworkPermissions(config, {\n    receiverAppId: props.receiverAppId,\n  })\n  config = withIosAppDelegateLoaded(config, {\n    disableDiscoveryAutostart: props.disableDiscoveryAutostart,\n    expandedController: props.expandedController,\n    receiverAppId: props.receiverAppId,\n    startDiscoveryAfterFirstTapOnCastButton:\n      props.startDiscoveryAfterFirstTapOnCastButton,\n    suspendSessionsWhenBackgrounded: props.suspendSessionsWhenBackgrounded,\n  })\n\n  return config\n}\n\n// From expo-cli RNMaps setup\nexport const MATCH_INIT =\n  /-\\s*\\(BOOL\\)\\s*application:\\s*\\(UIApplication\\s*\\*\\s*\\)\\s*\\w+\\s+didFinishLaunchingWithOptions:/g\n\ntype IosProps = {\n  disableDiscoveryAutostart?: boolean\n  expandedController?: boolean\n  receiverAppId?: string | null\n  startDiscoveryAfterFirstTapOnCastButton?: boolean\n  suspendSessionsWhenBackgrounded?: boolean\n}\n\nexport function addGoogleCastAppDelegateDidFinishLaunchingWithOptions(\n  src: string,\n  {\n    disableDiscoveryAutostart = false,\n    expandedController = false,\n    receiverAppId = null,\n    startDiscoveryAfterFirstTapOnCastButton = true,\n    suspendSessionsWhenBackgrounded = true,\n  }: IosProps = {}\n) {\n  let newSrc = []\n  newSrc.push(\n    // For extra safety\n    '#if __has_include(<GoogleCast/GoogleCast.h>)',\n    // TODO: This should probably read safely from a static file like the Info.plist\n    `  NSString *receiverAppID = ${\n      receiverAppId\n        ? `@\"${receiverAppId}\"`\n        : 'kGCKDefaultMediaReceiverApplicationID'\n    };`,\n    '  GCKDiscoveryCriteria *criteria = [[GCKDiscoveryCriteria alloc] initWithApplicationID:receiverAppID];',\n    '  GCKCastOptions* options = [[GCKCastOptions alloc] initWithDiscoveryCriteria:criteria];',\n    `  options.disableDiscoveryAutostart = ${String(!!disableDiscoveryAutostart)};`,\n    `  options.startDiscoveryAfterFirstTapOnCastButton = ${String(\n      !!startDiscoveryAfterFirstTapOnCastButton\n    )};`,\n    `  options.suspendSessionsWhenBackgrounded = ${String(\n      !!suspendSessionsWhenBackgrounded\n    )};`,\n    '  [GCKCastContext setSharedInstanceWithOptions:options];',\n    `  [GCKCastContext sharedInstance].useDefaultExpandedMediaControls = ${String(!!expandedController)};`,\n    '#endif'\n  )\n\n  newSrc = newSrc.filter(Boolean)\n\n  return mergeContents({\n    tag: 'react-native-google-cast-didFinishLaunchingWithOptions',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: MATCH_INIT,\n    offset: 2,\n    comment: '//',\n  })\n}\n\nfunction addGoogleCastAppDelegateImport(src: string) {\n  const newSrc = []\n  newSrc.push(\n    '#if __has_include(<GoogleCast/GoogleCast.h>)',\n    '#import <GoogleCast/GoogleCast.h>',\n    '#endif'\n  )\n\n  return mergeContents({\n    tag: 'react-native-google-cast-import',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /#import \"AppDelegate\\.h\"/,\n    offset: 1,\n    comment: '//',\n  })\n}\n"],"mappings":"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","ignoreList":[]}
\ No newline at end of file
+{"version":3,"names":["_generateCode","require","_configPlugins","_codeMod","LOCAL_NETWORK_USAGE","withIosLocalNetworkPermissions","config","receiverAppId","withInfoPlist","config_","Array","isArray","modResults","NSBonjourServices","push","Set","NSLocalNetworkUsageDescription","withIosAppDelegateLoaded","props","withAppDelegate","language","contents","addSwiftGoogleCastAppDelegateDidFinishLaunchingWithOptions","addSwiftGoogleCastAppDelegateImport","addGoogleCastAppDelegateDidFinishLaunchingWithOptions","addGoogleCastAppDelegateImport","withIosGoogleCast","disableDiscoveryAutostart","expandedController","startDiscoveryAfterFirstTapOnCastButton","suspendSessionsWhenBackgrounded","exports","MATCH_INIT","src","newSrc","String","filter","Boolean","mergeContents","tag","join","anchor","offset","comment","insertContentsInsideSwiftFunctionBlock","position"],"sources":["withIosGoogleCast.ts"],"sourcesContent":["import { mergeContents } from '@expo/config-plugins/build/utils/generateCode'\nimport {\n  ConfigPlugin,\n  withAppDelegate,\n  withInfoPlist,\n} from '@expo/config-plugins'\nimport { insertContentsInsideSwiftFunctionBlock } from '@expo/config-plugins/build/ios/codeMod'\nconst LOCAL_NETWORK_USAGE =\n  '${PRODUCT_NAME} uses the local network to discover Cast-enabled devices on your WiFi network'\n\n/**\n * On iOS, a dialog asking the user for the local network permission will now be displayed immediately when the app is opened.\n *\n * @param {*} config\n * @param {*} props.receiverAppId If using a custom receiver, make sure to replace `CC1AD845` with your custom receiver app id.\n * @returns\n */\nconst withIosLocalNetworkPermissions: ConfigPlugin<{\n  receiverAppId?: string\n}> = (config, { receiverAppId = 'CC1AD845' } = {}) => {\n  return withInfoPlist(config, (config_) => {\n    if (!Array.isArray(config_.modResults.NSBonjourServices)) {\n      config_.modResults.NSBonjourServices = []\n    }\n    // Add required values\n    config_.modResults.NSBonjourServices.push(\n      '_googlecast._tcp',\n      `_${receiverAppId}._googlecast._tcp`\n    )\n\n    // Remove duplicates\n    config_.modResults.NSBonjourServices = [\n      ...new Set(config_.modResults.NSBonjourServices),\n    ]\n\n    // For iOS 14+, you need to add local network permissions to Info.plist:\n    // https://developers.google.com/cast/docs/ios_sender/ios_permissions_changes#updating_your_app_on_ios_14\n    config_.modResults.NSLocalNetworkUsageDescription =\n      config_.modResults.NSLocalNetworkUsageDescription || LOCAL_NETWORK_USAGE\n    return config_\n  })\n}\n\n// TODO: Use AppDelegate swizzling\nconst withIosAppDelegateLoaded: ConfigPlugin<IosProps> = (config, props) => {\n  return withAppDelegate(config, (config_) => {\n    if (config_.modResults.language === 'swift') {\n      config_.modResults.contents =\n        addSwiftGoogleCastAppDelegateDidFinishLaunchingWithOptions(\n          config_.modResults.contents,\n          props\n        )\n      config_.modResults.contents = addSwiftGoogleCastAppDelegateImport(\n        config_.modResults.contents\n      ).contents\n    } else if (\n      config_.modResults.language === 'objc' ||\n      config_.modResults.language === 'objcpp'\n    ) {\n      config_.modResults.contents =\n        addGoogleCastAppDelegateDidFinishLaunchingWithOptions(\n          config_.modResults.contents,\n          props\n        ).contents\n      config_.modResults.contents = addGoogleCastAppDelegateImport(\n        config_.modResults.contents\n      ).contents\n    }\n\n    return config_\n  })\n}\n\nexport const withIosGoogleCast: ConfigPlugin<{\n  disableDiscoveryAutostart?: boolean\n  expandedController?: boolean\n  receiverAppId?: string\n  startDiscoveryAfterFirstTapOnCastButton?: boolean\n  suspendSessionsWhenBackgrounded?: boolean\n}> = (config, props) => {\n  config = withIosLocalNetworkPermissions(config, {\n    receiverAppId: props.receiverAppId,\n  })\n  config = withIosAppDelegateLoaded(config, {\n    disableDiscoveryAutostart: props.disableDiscoveryAutostart,\n    expandedController: props.expandedController,\n    receiverAppId: props.receiverAppId,\n    startDiscoveryAfterFirstTapOnCastButton:\n    props.startDiscoveryAfterFirstTapOnCastButton,\n    suspendSessionsWhenBackgrounded: props.suspendSessionsWhenBackgrounded,\n  })\n\n  return config\n}\n\n// From expo-cli RNMaps setup\nexport const MATCH_INIT =\n  /-\\s*\\(BOOL\\)\\s*application:\\s*\\(UIApplication\\s*\\*\\s*\\)\\s*\\w+\\s+didFinishLaunchingWithOptions:/g\n\ntype IosProps = {\n  disableDiscoveryAutostart?: boolean\n  expandedController?: boolean\n  receiverAppId?: string | null\n  startDiscoveryAfterFirstTapOnCastButton?: boolean\n  suspendSessionsWhenBackgrounded?: boolean\n}\n\nexport function addGoogleCastAppDelegateDidFinishLaunchingWithOptions(\n  src: string,\n  {\n    disableDiscoveryAutostart = false,\n    expandedController = false,\n    receiverAppId = null,\n    startDiscoveryAfterFirstTapOnCastButton = true,\n    suspendSessionsWhenBackgrounded = true,\n  }: IosProps = {}\n) {\n  let newSrc = []\n  newSrc.push(\n    // For extra safety\n    '#if __has_include(<GoogleCast/GoogleCast.h>)',\n    // TODO: This should probably read safely from a static file like the Info.plist\n    `  NSString *receiverAppID = ${\n      receiverAppId\n        ? `@\"${receiverAppId}\"`\n        : 'kGCKDefaultMediaReceiverApplicationID'\n    };`,\n    '  GCKDiscoveryCriteria *criteria = [[GCKDiscoveryCriteria alloc] initWithApplicationID:receiverAppID];',\n    '  GCKCastOptions* options = [[GCKCastOptions alloc] initWithDiscoveryCriteria:criteria];',\n    `  options.disableDiscoveryAutostart = ${String(!!disableDiscoveryAutostart)};`,\n    `  options.startDiscoveryAfterFirstTapOnCastButton = ${String(\n      !!startDiscoveryAfterFirstTapOnCastButton\n    )};`,\n    `  options.suspendSessionsWhenBackgrounded = ${String(\n      !!suspendSessionsWhenBackgrounded\n    )};`,\n    '  [GCKCastContext setSharedInstanceWithOptions:options];',\n    `  [GCKCastContext sharedInstance].useDefaultExpandedMediaControls = ${String(!!expandedController)};`,\n    '#endif'\n  )\n\n  newSrc = newSrc.filter(Boolean)\n\n  return mergeContents({\n    tag: 'react-native-google-cast-didFinishLaunchingWithOptions',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: MATCH_INIT,\n    offset: 2,\n    comment: '//',\n  })\n}\n\nfunction addGoogleCastAppDelegateImport(src: string) {\n  const newSrc = []\n  newSrc.push(\n    '#if __has_include(<GoogleCast/GoogleCast.h>)',\n    '#import <GoogleCast/GoogleCast.h>',\n    '#endif'\n  )\n\n  return mergeContents({\n    tag: 'react-native-google-cast-import',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /#import \"AppDelegate\\.h\"/,\n    offset: 1,\n    comment: '//',\n  })\n}\n\nfunction addSwiftGoogleCastAppDelegateImport(src: string) {\n  const newSrc = []\n  newSrc.push('#if canImport(GoogleCast)', 'import GoogleCast', '#endif')\n\n  return mergeContents({\n    tag: 'react-native-google-cast-import',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /import React/,\n    offset: 0,\n    comment: '//',\n  })\n}\n\nexport function addSwiftGoogleCastAppDelegateDidFinishLaunchingWithOptions(\n  src: string,\n  {\n    disableDiscoveryAutostart = false,\n    expandedController = false,\n    receiverAppId = null,\n    startDiscoveryAfterFirstTapOnCastButton = true,\n    suspendSessionsWhenBackgrounded = true,\n  }: IosProps = {}\n) {\n  let newSrc = []\n  newSrc.push(\n    // For extra safety\n    '#if canImport(GoogleCast)',\n    `    let receiverAppID = ${\n      receiverAppId\n        ? `\"${receiverAppId}\"`\n        : 'kGCKDefaultMediaReceiverApplicationID'\n    }`,\n    '    let criteria = GCKDiscoveryCriteria(applicationID: receiverAppID)',\n    '    let options = GCKCastOptions(discoveryCriteria: criteria)',\n    `    options.disableDiscoveryAutostart = ${String(!!disableDiscoveryAutostart)}`,\n    `    options.startDiscoveryAfterFirstTapOnCastButton = ${String(\n      !!startDiscoveryAfterFirstTapOnCastButton\n    )}`,\n    `    options.suspendSessionsWhenBackgrounded = ${String(\n      !!suspendSessionsWhenBackgrounded\n    )}`,\n    '    GCKCastContext.setSharedInstanceWith(options)',\n    `    GCKCastContext.sharedInstance().useDefaultExpandedMediaControls = ${String(!!expandedController)}`,\n    '#endif'\n  )\n\n  newSrc = newSrc.filter(Boolean)\n\n  return insertContentsInsideSwiftFunctionBlock(\n    src,\n    'application didFinishLaunchingWithOptions:',\n    newSrc.join('\\n'),\n    { position: 'tailBeforeLastReturn' }\n  )\n}\n"],"mappings":"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","ignoreList":[]}
\ No newline at end of file
diff --git a/node_modules/react-native-google-cast/lib/module/plugin/withAndroidGoogleCast.js b/node_modules/react-native-google-cast/lib/module/plugin/withAndroidGoogleCast.js
index 2afbb4c..71ae395 100644
--- a/node_modules/react-native-google-cast/lib/module/plugin/withAndroidGoogleCast.js
+++ b/node_modules/react-native-google-cast/lib/module/plugin/withAndroidGoogleCast.js
@@ -167,13 +167,18 @@ function addSafeExtGet(src) {
 function addGoogleCastVersionImport(src, {
   version
 } = {}) {
-  const newSrc = [];
-  newSrc.push(`        castFrameworkVersion = "${version}"`);
+  const newSrc = [`        castFrameworkVersion = "${version}"`];
+  const hasExtBlock = src.match(/ext(?:\s+)?\{/);
+  const anchor = hasExtBlock ? /ext(?:\s+)?\{/ : /buildscript(?:\s+)?\{/;
+  if (!hasExtBlock) {
+    newSrc.unshift('  ext {');
+    newSrc.push('  }');
+  }
   return mergeContents({
-    tag: 'react-native-google-cast-version',
+    tag: 'react-native-google-cast-version-import',
     src,
     newSrc: newSrc.join('\n'),
-    anchor: /ext(?:\s+)?\{/,
+    anchor,
     offset: 1,
     comment: '//'
   });
diff --git a/node_modules/react-native-google-cast/lib/module/plugin/withAndroidGoogleCast.js.map b/node_modules/react-native-google-cast/lib/module/plugin/withAndroidGoogleCast.js.map
index de9cdfb..538d1bc 100644
--- a/node_modules/react-native-google-cast/lib/module/plugin/withAndroidGoogleCast.js.map
+++ b/node_modules/react-native-google-cast/lib/module/plugin/withAndroidGoogleCast.js.map
@@ -1 +1 @@
-{"version":3,"names":["AndroidConfig","withAndroidManifest","withAppBuildGradle","withMainActivity","withProjectBuildGradle","addImports","mergeContents","removeContents","addMetaDataItemToMainApplication","getMainApplicationOrThrow","Manifest","META_PROVIDER_CLASS","META_RECEIVER_APP_ID","MAIN_ACTIVITY_LANGUAGES","java","code","anchor","kt","EXPANDED_CONTROLLER_ACTIVITY","ensureExpandedControllerActivity","mainApplication","Array","isArray","activity","filter","_activity$$","$","push","withAndroidManifestCast","config","expandedController","receiverAppId","config_","modResults","withProjectBuildGradleVersion","version","language","Error","contents","addGoogleCastVersionImport","withAppBuildGradleImport","addSafeExtGet","addGoogleCastImport","withMainActivityLazyLoading","src","addGoogleCastLazyLoadingImport","withAndroidGoogleCast","props","androidPlayServicesCastFrameworkVersion","mainActivity","newSrc","tag","join","offset","comment","match"],"sources":["withAndroidGoogleCast.ts"],"sourcesContent":["import {\n  AndroidConfig,\n  ConfigPlugin,\n  withAndroidManifest,\n  withAppBuildGradle,\n  withMainActivity,\n  withProjectBuildGradle,\n} from '@expo/config-plugins'\nimport { addImports } from '@expo/config-plugins/build/android/codeMod'\nimport {\n  mergeContents,\n  removeContents,\n} from '@expo/config-plugins/build/utils/generateCode'\n\nconst { addMetaDataItemToMainApplication, getMainApplicationOrThrow } =\n  AndroidConfig.Manifest\n\nconst META_PROVIDER_CLASS =\n  'com.google.android.gms.cast.framework.OPTIONS_PROVIDER_CLASS_NAME'\nconst META_RECEIVER_APP_ID =\n  'com.reactnative.googlecast.RECEIVER_APPLICATION_ID'\n\nconst MAIN_ACTIVITY_LANGUAGES: Record<\n  'java' | 'kt',\n  { code: string; anchor: RegExp }\n> = {\n  java: {\n    code: 'CastContext.getSharedInstance(this)',\n    anchor: /super\\.onCreate\\(\\w+\\)/,\n  },\n  kt: {\n    code: 'CastContext.getSharedInstance(this)',\n    anchor: /super\\.onCreate\\(\\w+\\)/,\n  },\n}\n\ntype Props = {\n  expandedController?: boolean\n  receiverAppId?: string\n}\n\nconst EXPANDED_CONTROLLER_ACTIVITY =\n  'com.reactnative.googlecast.RNGCExpandedControllerActivity'\n\nasync function ensureExpandedControllerActivity({\n  mainApplication,\n}: {\n  mainApplication: AndroidConfig.Manifest.ManifestApplication\n}) {\n  if (Array.isArray(mainApplication.activity)) {\n    // If the expanded controller activity is already added\n    mainApplication.activity = mainApplication.activity.filter((activity) => {\n      return activity.$?.['android:name'] !== EXPANDED_CONTROLLER_ACTIVITY\n    })\n  } else {\n    mainApplication.activity = []\n  }\n\n  // adds `<activity android:name=\"${EXPANDED_CONTROLLER_ACTIVITY}\" />` to the manifest\n  mainApplication.activity.push({\n    $: {\n      'android:name': EXPANDED_CONTROLLER_ACTIVITY,\n    },\n  })\n  return mainApplication\n}\n\nconst withAndroidManifestCast: ConfigPlugin<Props> = (\n  config,\n  { expandedController, receiverAppId } = {}\n) => {\n  return withAndroidManifest(config, async (config_) => {\n    const mainApplication = getMainApplicationOrThrow(config_.modResults)\n\n    if (expandedController) {\n      ensureExpandedControllerActivity({ mainApplication })\n    }\n\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      META_PROVIDER_CLASS,\n      // This is the native Java class\n      'com.reactnative.googlecast.GoogleCastOptionsProvider'\n    )\n    if (receiverAppId) {\n      addMetaDataItemToMainApplication(\n        mainApplication,\n        META_RECEIVER_APP_ID,\n        receiverAppId\n      )\n    }\n    return config_\n  })\n}\n\nconst withProjectBuildGradleVersion: ConfigPlugin<{ version?: string }> = (\n  config,\n  { version }\n) => {\n  return withProjectBuildGradle(config, (config_) => {\n    if (config_.modResults.language !== 'groovy')\n      throw new Error(\n        'react-native-google-cast config plugin does not support Kotlin /build.gradle yet.'\n      )\n    config_.modResults.contents = addGoogleCastVersionImport(\n      config_.modResults.contents,\n      {\n        version,\n      }\n    ).contents\n\n    return config_\n  })\n}\n\nconst withAppBuildGradleImport: ConfigPlugin<{ version?: string }> = (\n  config,\n  { version }\n) => {\n  return withAppBuildGradle(config, (config_) => {\n    if (config_.modResults.language !== 'groovy')\n      throw new Error(\n        'react-native-google-cast config plugin does not support Kotlin app/build.gradle yet.'\n      )\n    config_.modResults.contents = addSafeExtGet(config_.modResults.contents)\n\n    config_.modResults.contents = addGoogleCastImport(\n      config_.modResults.contents,\n      {\n        version,\n      }\n    ).contents\n\n    return config_\n  })\n}\n\nconst withMainActivityLazyLoading: ConfigPlugin = (config) => {\n  return withMainActivity(config, async (config_) => {\n    const src = addImports(\n      config_.modResults.contents,\n      ['com.google.android.gms.cast.framework.CastContext'],\n      config_.modResults.language === 'java'\n    )\n\n    config_.modResults.contents = addGoogleCastLazyLoadingImport(\n      src,\n      config_.modResults.language\n    ).contents\n\n    return config_\n  })\n}\n\n// castFrameworkVersion\nexport const withAndroidGoogleCast: ConfigPlugin<{\n  /**\n   * @default '+'\n   */\n  androidPlayServicesCastFrameworkVersion?: string\n\n  expandedController?: boolean\n\n  /**\n   * ??\n   */\n  receiverAppId?: string\n}> = (config, props) => {\n  config = withAndroidManifestCast(config, {\n    expandedController: props.expandedController,\n    receiverAppId: props.receiverAppId,\n  })\n  config = withMainActivityLazyLoading(config)\n\n  config = withProjectBuildGradleVersion(config, {\n    // gradle dep version\n    version: props.androidPlayServicesCastFrameworkVersion ?? '+',\n  })\n  config = withAppBuildGradleImport(config, {\n    // gradle dep version\n    version: props.androidPlayServicesCastFrameworkVersion ?? '+',\n  })\n\n  return config\n}\n\nfunction addGoogleCastLazyLoadingImport(\n  src: string,\n  language: keyof typeof MAIN_ACTIVITY_LANGUAGES\n) {\n  const mainActivity = MAIN_ACTIVITY_LANGUAGES[language]\n  if (!mainActivity) {\n    throw new Error(\n      `react-native-google-cast config plugin does not support MainActivity.${language} yet`\n    )\n  }\n\n  const newSrc = []\n  newSrc.push(`    ${mainActivity.code}`)\n\n  return mergeContents({\n    tag: 'react-native-google-cast-onCreate',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: mainActivity.anchor,\n    offset: 1,\n    comment: '//',\n  })\n}\n\n// TODO: Add this ability to autolinking\n// dependencies { implementation \"com.google.android.gms:play-services-cast-framework:+\" }\nfunction addGoogleCastImport(\n  src: string,\n  { version }: { version?: string } = {}\n) {\n  const newSrc = []\n\n  newSrc.push(\n    `    implementation \"com.google.android.gms:play-services-cast-framework:\\${safeExtGet('castFrameworkVersion', '${version}')}\"`\n  )\n\n  return mergeContents({\n    tag: 'react-native-google-cast-dependencies',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /dependencies(?:\\s+)?\\{/,\n    offset: 1,\n    comment: '//',\n  })\n}\n\nfunction addSafeExtGet(src: string) {\n  const tag = 'safeExtGet'\n\n  src = removeContents({ src, tag }).contents\n\n  // If the source already has a safeExtGet method after removing this one, then go with the existing one.\n  if (src.match(/def(?:\\s+)?safeExtGet\\(/)) {\n    return src\n  }\n  // Otherwise add a new one\n  const newSrc = []\n  newSrc.push(\n    'def safeExtGet(prop, fallback) {',\n    '  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback',\n    '}'\n  )\n\n  return mergeContents({\n    tag: 'safeExtGet',\n    src,\n    newSrc: newSrc.join('\\n'),\n    // This block can go anywhere in the upper scope\n    anchor: /apply plugin/,\n    offset: 1,\n    comment: '//',\n  }).contents\n}\n\nfunction addGoogleCastVersionImport(\n  src: string,\n  { version }: { version?: string } = {}\n) {\n  const newSrc = []\n  newSrc.push(`        castFrameworkVersion = \"${version}\"`)\n\n  return mergeContents({\n    tag: 'react-native-google-cast-version',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /ext(?:\\s+)?\\{/,\n    offset: 1,\n    comment: '//',\n  })\n}\n"],"mappings":"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","ignoreList":[]}
\ No newline at end of file
+{"version":3,"names":["AndroidConfig","withAndroidManifest","withAppBuildGradle","withMainActivity","withProjectBuildGradle","addImports","mergeContents","removeContents","addMetaDataItemToMainApplication","getMainApplicationOrThrow","Manifest","META_PROVIDER_CLASS","META_RECEIVER_APP_ID","MAIN_ACTIVITY_LANGUAGES","java","code","anchor","kt","EXPANDED_CONTROLLER_ACTIVITY","ensureExpandedControllerActivity","mainApplication","Array","isArray","activity","filter","_activity$$","$","push","withAndroidManifestCast","config","expandedController","receiverAppId","config_","modResults","withProjectBuildGradleVersion","version","language","Error","contents","addGoogleCastVersionImport","withAppBuildGradleImport","addSafeExtGet","addGoogleCastImport","withMainActivityLazyLoading","src","addGoogleCastLazyLoadingImport","withAndroidGoogleCast","props","androidPlayServicesCastFrameworkVersion","mainActivity","newSrc","tag","join","offset","comment","match","hasExtBlock","unshift"],"sources":["withAndroidGoogleCast.ts"],"sourcesContent":["import {\n  AndroidConfig,\n  ConfigPlugin,\n  withAndroidManifest,\n  withAppBuildGradle,\n  withMainActivity,\n  withProjectBuildGradle,\n} from '@expo/config-plugins'\nimport { addImports } from '@expo/config-plugins/build/android/codeMod'\nimport {\n  mergeContents,\n  removeContents,\n} from '@expo/config-plugins/build/utils/generateCode'\n\nconst { addMetaDataItemToMainApplication, getMainApplicationOrThrow } =\n  AndroidConfig.Manifest\n\nconst META_PROVIDER_CLASS =\n  'com.google.android.gms.cast.framework.OPTIONS_PROVIDER_CLASS_NAME'\nconst META_RECEIVER_APP_ID =\n  'com.reactnative.googlecast.RECEIVER_APPLICATION_ID'\n\nconst MAIN_ACTIVITY_LANGUAGES: Record<\n  'java' | 'kt',\n  { code: string; anchor: RegExp }\n> = {\n  java: {\n    code: 'CastContext.getSharedInstance(this)',\n    anchor: /super\\.onCreate\\(\\w+\\)/,\n  },\n  kt: {\n    code: 'CastContext.getSharedInstance(this)',\n    anchor: /super\\.onCreate\\(\\w+\\)/,\n  },\n}\n\ntype Props = {\n  expandedController?: boolean\n  receiverAppId?: string\n}\n\nconst EXPANDED_CONTROLLER_ACTIVITY =\n  'com.reactnative.googlecast.RNGCExpandedControllerActivity'\n\nasync function ensureExpandedControllerActivity({\n  mainApplication,\n}: {\n  mainApplication: AndroidConfig.Manifest.ManifestApplication\n}) {\n  if (Array.isArray(mainApplication.activity)) {\n    // If the expanded controller activity is already added\n    mainApplication.activity = mainApplication.activity.filter((activity) => {\n      return activity.$?.['android:name'] !== EXPANDED_CONTROLLER_ACTIVITY\n    })\n  } else {\n    mainApplication.activity = []\n  }\n\n  // adds `<activity android:name=\"${EXPANDED_CONTROLLER_ACTIVITY}\" />` to the manifest\n  mainApplication.activity.push({\n    $: {\n      'android:name': EXPANDED_CONTROLLER_ACTIVITY,\n    },\n  })\n  return mainApplication\n}\n\nconst withAndroidManifestCast: ConfigPlugin<Props> = (\n  config,\n  { expandedController, receiverAppId } = {}\n) => {\n  return withAndroidManifest(config, async (config_) => {\n    const mainApplication = getMainApplicationOrThrow(config_.modResults)\n\n    if (expandedController) {\n      ensureExpandedControllerActivity({ mainApplication })\n    }\n\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      META_PROVIDER_CLASS,\n      // This is the native Java class\n      'com.reactnative.googlecast.GoogleCastOptionsProvider'\n    )\n    if (receiverAppId) {\n      addMetaDataItemToMainApplication(\n        mainApplication,\n        META_RECEIVER_APP_ID,\n        receiverAppId\n      )\n    }\n    return config_\n  })\n}\n\nconst withProjectBuildGradleVersion: ConfigPlugin<{ version?: string }> = (\n  config,\n  { version }\n) => {\n  return withProjectBuildGradle(config, (config_) => {\n    if (config_.modResults.language !== 'groovy')\n      throw new Error(\n        'react-native-google-cast config plugin does not support Kotlin /build.gradle yet.'\n      )\n    config_.modResults.contents = addGoogleCastVersionImport(\n      config_.modResults.contents,\n      {\n        version,\n      }\n    ).contents\n\n    return config_\n  })\n}\n\nconst withAppBuildGradleImport: ConfigPlugin<{ version?: string }> = (\n  config,\n  { version }\n) => {\n  return withAppBuildGradle(config, (config_) => {\n    if (config_.modResults.language !== 'groovy')\n      throw new Error(\n        'react-native-google-cast config plugin does not support Kotlin app/build.gradle yet.'\n      )\n    config_.modResults.contents = addSafeExtGet(config_.modResults.contents)\n\n    config_.modResults.contents = addGoogleCastImport(\n      config_.modResults.contents,\n      {\n        version,\n      }\n    ).contents\n\n    return config_\n  })\n}\n\nconst withMainActivityLazyLoading: ConfigPlugin = (config) => {\n  return withMainActivity(config, async (config_) => {\n    const src = addImports(\n      config_.modResults.contents,\n      ['com.google.android.gms.cast.framework.CastContext'],\n      config_.modResults.language === 'java'\n    )\n\n    config_.modResults.contents = addGoogleCastLazyLoadingImport(\n      src,\n      config_.modResults.language\n    ).contents\n\n    return config_\n  })\n}\n\n// castFrameworkVersion\nexport const withAndroidGoogleCast: ConfigPlugin<{\n  /**\n   * @default '+'\n   */\n  androidPlayServicesCastFrameworkVersion?: string\n\n  expandedController?: boolean\n\n  /**\n   * ??\n   */\n  receiverAppId?: string\n}> = (config, props) => {\n  config = withAndroidManifestCast(config, {\n    expandedController: props.expandedController,\n    receiverAppId: props.receiverAppId,\n  })\n  config = withMainActivityLazyLoading(config)\n\n  config = withProjectBuildGradleVersion(config, {\n    // gradle dep version\n    version: props.androidPlayServicesCastFrameworkVersion ?? '+',\n  })\n  config = withAppBuildGradleImport(config, {\n    // gradle dep version\n    version: props.androidPlayServicesCastFrameworkVersion ?? '+',\n  })\n\n  return config\n}\n\nfunction addGoogleCastLazyLoadingImport(\n  src: string,\n  language: keyof typeof MAIN_ACTIVITY_LANGUAGES\n) {\n  const mainActivity = MAIN_ACTIVITY_LANGUAGES[language]\n  if (!mainActivity) {\n    throw new Error(\n      `react-native-google-cast config plugin does not support MainActivity.${language} yet`\n    )\n  }\n\n  const newSrc = []\n  newSrc.push(`    ${mainActivity.code}`)\n\n  return mergeContents({\n    tag: 'react-native-google-cast-onCreate',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: mainActivity.anchor,\n    offset: 1,\n    comment: '//',\n  })\n}\n\n// TODO: Add this ability to autolinking\n// dependencies { implementation \"com.google.android.gms:play-services-cast-framework:+\" }\nfunction addGoogleCastImport(\n  src: string,\n  { version }: { version?: string } = {}\n) {\n  const newSrc = []\n\n  newSrc.push(\n    `    implementation \"com.google.android.gms:play-services-cast-framework:\\${safeExtGet('castFrameworkVersion', '${version}')}\"`\n  )\n\n  return mergeContents({\n    tag: 'react-native-google-cast-dependencies',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /dependencies(?:\\s+)?\\{/,\n    offset: 1,\n    comment: '//',\n  })\n}\n\nfunction addSafeExtGet(src: string) {\n  const tag = 'safeExtGet'\n\n  src = removeContents({ src, tag }).contents\n\n  // If the source already has a safeExtGet method after removing this one, then go with the existing one.\n  if (src.match(/def(?:\\s+)?safeExtGet\\(/)) {\n    return src\n  }\n  // Otherwise add a new one\n  const newSrc = []\n  newSrc.push(\n    'def safeExtGet(prop, fallback) {',\n    '  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback',\n    '}'\n  )\n\n  return mergeContents({\n    tag: 'safeExtGet',\n    src,\n    newSrc: newSrc.join('\\n'),\n    // This block can go anywhere in the upper scope\n    anchor: /apply plugin/,\n    offset: 1,\n    comment: '//',\n  }).contents\n}\n\nfunction addGoogleCastVersionImport(\n  src: string,\n  { version }: { version?: string } = {}\n) {\n  const newSrc = [`        castFrameworkVersion = \"${version}\"`]\n  const hasExtBlock = src.match(/ext(?:\\s+)?\\{/)\n  const anchor = hasExtBlock ? /ext(?:\\s+)?\\{/ : /buildscript(?:\\s+)?\\{/\n\n  if (!hasExtBlock) {\n    newSrc.unshift('  ext {')\n    newSrc.push('  }')\n  }\n\n  return mergeContents({\n    tag: 'react-native-google-cast-version-import',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor,\n    offset: 1,\n    comment: '//',\n  })\n}\n"],"mappings":"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","ignoreList":[]}
\ No newline at end of file
diff --git a/node_modules/react-native-google-cast/lib/module/plugin/withIosGoogleCast.js b/node_modules/react-native-google-cast/lib/module/plugin/withIosGoogleCast.js
index 7501fdd..aa6cd87 100644
--- a/node_modules/react-native-google-cast/lib/module/plugin/withIosGoogleCast.js
+++ b/node_modules/react-native-google-cast/lib/module/plugin/withIosGoogleCast.js
@@ -1,5 +1,6 @@
 import { mergeContents } from '@expo/config-plugins/build/utils/generateCode';
 import { withAppDelegate, withInfoPlist } from '@expo/config-plugins';
+import { insertContentsInsideSwiftFunctionBlock } from '@expo/config-plugins/build/ios/codeMod';
 const LOCAL_NETWORK_USAGE = '${PRODUCT_NAME} uses the local network to discover Cast-enabled devices on your WiFi network';
 
 /**
@@ -32,11 +33,13 @@ const withIosLocalNetworkPermissions = (config, {
 // TODO: Use AppDelegate swizzling
 const withIosAppDelegateLoaded = (config, props) => {
   return withAppDelegate(config, config_ => {
-    if (!['objc', 'objcpp'].includes(config_.modResults.language)) {
-      throw new Error("react-native-google-cast config plugin does not support AppDelegates that aren't Objective-C(++) yet.");
+    if (config_.modResults.language === 'swift') {
+      config_.modResults.contents = addSwiftGoogleCastAppDelegateDidFinishLaunchingWithOptions(config_.modResults.contents, props);
+      config_.modResults.contents = addSwiftGoogleCastAppDelegateImport(config_.modResults.contents).contents;
+    } else if (config_.modResults.language === 'objc' || config_.modResults.language === 'objcpp') {
+      config_.modResults.contents = addGoogleCastAppDelegateDidFinishLaunchingWithOptions(config_.modResults.contents, props).contents;
+      config_.modResults.contents = addGoogleCastAppDelegateImport(config_.modResults.contents).contents;
     }
-    config_.modResults.contents = addGoogleCastAppDelegateDidFinishLaunchingWithOptions(config_.modResults.contents, props).contents;
-    config_.modResults.contents = addGoogleCastAppDelegateImport(config_.modResults.contents).contents;
     return config_;
   });
 };
@@ -91,4 +94,32 @@ function addGoogleCastAppDelegateImport(src) {
     comment: '//'
   });
 }
+function addSwiftGoogleCastAppDelegateImport(src) {
+  const newSrc = [];
+  newSrc.push('#if canImport(GoogleCast)', 'import GoogleCast', '#endif');
+  return mergeContents({
+    tag: 'react-native-google-cast-import',
+    src,
+    newSrc: newSrc.join('\n'),
+    anchor: /import React/,
+    offset: 0,
+    comment: '//'
+  });
+}
+export function addSwiftGoogleCastAppDelegateDidFinishLaunchingWithOptions(src, {
+  disableDiscoveryAutostart = false,
+  expandedController = false,
+  receiverAppId = null,
+  startDiscoveryAfterFirstTapOnCastButton = true,
+  suspendSessionsWhenBackgrounded = true
+} = {}) {
+  let newSrc = [];
+  newSrc.push(
+  // For extra safety
+  '#if canImport(GoogleCast)', `    let receiverAppID = ${receiverAppId ? `"${receiverAppId}"` : 'kGCKDefaultMediaReceiverApplicationID'}`, '    let criteria = GCKDiscoveryCriteria(applicationID: receiverAppID)', '    let options = GCKCastOptions(discoveryCriteria: criteria)', `    options.disableDiscoveryAutostart = ${String(!!disableDiscoveryAutostart)}`, `    options.startDiscoveryAfterFirstTapOnCastButton = ${String(!!startDiscoveryAfterFirstTapOnCastButton)}`, `    options.suspendSessionsWhenBackgrounded = ${String(!!suspendSessionsWhenBackgrounded)}`, '    GCKCastContext.setSharedInstanceWith(options)', `    GCKCastContext.sharedInstance().useDefaultExpandedMediaControls = ${String(!!expandedController)}`, '#endif');
+  newSrc = newSrc.filter(Boolean);
+  return insertContentsInsideSwiftFunctionBlock(src, 'application didFinishLaunchingWithOptions:', newSrc.join('\n'), {
+    position: 'tailBeforeLastReturn'
+  });
+}
 //# sourceMappingURL=withIosGoogleCast.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-google-cast/lib/module/plugin/withIosGoogleCast.js.map b/node_modules/react-native-google-cast/lib/module/plugin/withIosGoogleCast.js.map
index 1ce6b8a..1fde12c 100644
--- a/node_modules/react-native-google-cast/lib/module/plugin/withIosGoogleCast.js.map
+++ b/node_modules/react-native-google-cast/lib/module/plugin/withIosGoogleCast.js.map
@@ -1 +1 @@
-{"version":3,"names":["mergeContents","withAppDelegate","withInfoPlist","LOCAL_NETWORK_USAGE","withIosLocalNetworkPermissions","config","receiverAppId","config_","Array","isArray","modResults","NSBonjourServices","push","Set","NSLocalNetworkUsageDescription","withIosAppDelegateLoaded","props","includes","language","Error","contents","addGoogleCastAppDelegateDidFinishLaunchingWithOptions","addGoogleCastAppDelegateImport","withIosGoogleCast","disableDiscoveryAutostart","expandedController","startDiscoveryAfterFirstTapOnCastButton","suspendSessionsWhenBackgrounded","MATCH_INIT","src","newSrc","String","filter","Boolean","tag","join","anchor","offset","comment"],"sources":["withIosGoogleCast.ts"],"sourcesContent":["import { mergeContents } from '@expo/config-plugins/build/utils/generateCode'\nimport {\n  ConfigPlugin,\n  withAppDelegate,\n  withInfoPlist,\n} from '@expo/config-plugins'\n\nconst LOCAL_NETWORK_USAGE =\n  '${PRODUCT_NAME} uses the local network to discover Cast-enabled devices on your WiFi network'\n\n/**\n * On iOS, a dialog asking the user for the local network permission will now be displayed immediately when the app is opened.\n *\n * @param {*} config\n * @param {*} props.receiverAppId If using a custom receiver, make sure to replace `CC1AD845` with your custom receiver app id.\n * @returns\n */\nconst withIosLocalNetworkPermissions: ConfigPlugin<{\n  receiverAppId?: string\n}> = (config, { receiverAppId = 'CC1AD845' } = {}) => {\n  return withInfoPlist(config, (config_) => {\n    if (!Array.isArray(config_.modResults.NSBonjourServices)) {\n      config_.modResults.NSBonjourServices = []\n    }\n    // Add required values\n    config_.modResults.NSBonjourServices.push(\n      '_googlecast._tcp',\n      `_${receiverAppId}._googlecast._tcp`\n    )\n\n    // Remove duplicates\n    config_.modResults.NSBonjourServices = [\n      ...new Set(config_.modResults.NSBonjourServices),\n    ]\n\n    // For iOS 14+, you need to add local network permissions to Info.plist:\n    // https://developers.google.com/cast/docs/ios_sender/ios_permissions_changes#updating_your_app_on_ios_14\n    config_.modResults.NSLocalNetworkUsageDescription =\n      config_.modResults.NSLocalNetworkUsageDescription || LOCAL_NETWORK_USAGE\n    return config_\n  })\n}\n\n// TODO: Use AppDelegate swizzling\nconst withIosAppDelegateLoaded: ConfigPlugin<IosProps> = (config, props) => {\n  return withAppDelegate(config, (config_) => {\n    if (!['objc', 'objcpp'].includes(config_.modResults.language)) {\n      throw new Error(\n        \"react-native-google-cast config plugin does not support AppDelegates that aren't Objective-C(++) yet.\"\n      )\n    }\n    config_.modResults.contents =\n      addGoogleCastAppDelegateDidFinishLaunchingWithOptions(\n        config_.modResults.contents,\n        props\n      ).contents\n    config_.modResults.contents = addGoogleCastAppDelegateImport(\n      config_.modResults.contents\n    ).contents\n\n    return config_\n  })\n}\n\nexport const withIosGoogleCast: ConfigPlugin<{\n  disableDiscoveryAutostart?: boolean\n  expandedController?: boolean\n  receiverAppId?: string\n  startDiscoveryAfterFirstTapOnCastButton?: boolean\n  suspendSessionsWhenBackgrounded?: boolean\n}> = (config, props) => {\n  config = withIosLocalNetworkPermissions(config, {\n    receiverAppId: props.receiverAppId,\n  })\n  config = withIosAppDelegateLoaded(config, {\n    disableDiscoveryAutostart: props.disableDiscoveryAutostart,\n    expandedController: props.expandedController,\n    receiverAppId: props.receiverAppId,\n    startDiscoveryAfterFirstTapOnCastButton:\n      props.startDiscoveryAfterFirstTapOnCastButton,\n    suspendSessionsWhenBackgrounded: props.suspendSessionsWhenBackgrounded,\n  })\n\n  return config\n}\n\n// From expo-cli RNMaps setup\nexport const MATCH_INIT =\n  /-\\s*\\(BOOL\\)\\s*application:\\s*\\(UIApplication\\s*\\*\\s*\\)\\s*\\w+\\s+didFinishLaunchingWithOptions:/g\n\ntype IosProps = {\n  disableDiscoveryAutostart?: boolean\n  expandedController?: boolean\n  receiverAppId?: string | null\n  startDiscoveryAfterFirstTapOnCastButton?: boolean\n  suspendSessionsWhenBackgrounded?: boolean\n}\n\nexport function addGoogleCastAppDelegateDidFinishLaunchingWithOptions(\n  src: string,\n  {\n    disableDiscoveryAutostart = false,\n    expandedController = false,\n    receiverAppId = null,\n    startDiscoveryAfterFirstTapOnCastButton = true,\n    suspendSessionsWhenBackgrounded = true,\n  }: IosProps = {}\n) {\n  let newSrc = []\n  newSrc.push(\n    // For extra safety\n    '#if __has_include(<GoogleCast/GoogleCast.h>)',\n    // TODO: This should probably read safely from a static file like the Info.plist\n    `  NSString *receiverAppID = ${\n      receiverAppId\n        ? `@\"${receiverAppId}\"`\n        : 'kGCKDefaultMediaReceiverApplicationID'\n    };`,\n    '  GCKDiscoveryCriteria *criteria = [[GCKDiscoveryCriteria alloc] initWithApplicationID:receiverAppID];',\n    '  GCKCastOptions* options = [[GCKCastOptions alloc] initWithDiscoveryCriteria:criteria];',\n    `  options.disableDiscoveryAutostart = ${String(!!disableDiscoveryAutostart)};`,\n    `  options.startDiscoveryAfterFirstTapOnCastButton = ${String(\n      !!startDiscoveryAfterFirstTapOnCastButton\n    )};`,\n    `  options.suspendSessionsWhenBackgrounded = ${String(\n      !!suspendSessionsWhenBackgrounded\n    )};`,\n    '  [GCKCastContext setSharedInstanceWithOptions:options];',\n    `  [GCKCastContext sharedInstance].useDefaultExpandedMediaControls = ${String(!!expandedController)};`,\n    '#endif'\n  )\n\n  newSrc = newSrc.filter(Boolean)\n\n  return mergeContents({\n    tag: 'react-native-google-cast-didFinishLaunchingWithOptions',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: MATCH_INIT,\n    offset: 2,\n    comment: '//',\n  })\n}\n\nfunction addGoogleCastAppDelegateImport(src: string) {\n  const newSrc = []\n  newSrc.push(\n    '#if __has_include(<GoogleCast/GoogleCast.h>)',\n    '#import <GoogleCast/GoogleCast.h>',\n    '#endif'\n  )\n\n  return mergeContents({\n    tag: 'react-native-google-cast-import',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /#import \"AppDelegate\\.h\"/,\n    offset: 1,\n    comment: '//',\n  })\n}\n"],"mappings":"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","ignoreList":[]}
\ No newline at end of file
+{"version":3,"names":["mergeContents","withAppDelegate","withInfoPlist","insertContentsInsideSwiftFunctionBlock","LOCAL_NETWORK_USAGE","withIosLocalNetworkPermissions","config","receiverAppId","config_","Array","isArray","modResults","NSBonjourServices","push","Set","NSLocalNetworkUsageDescription","withIosAppDelegateLoaded","props","language","contents","addSwiftGoogleCastAppDelegateDidFinishLaunchingWithOptions","addSwiftGoogleCastAppDelegateImport","addGoogleCastAppDelegateDidFinishLaunchingWithOptions","addGoogleCastAppDelegateImport","withIosGoogleCast","disableDiscoveryAutostart","expandedController","startDiscoveryAfterFirstTapOnCastButton","suspendSessionsWhenBackgrounded","MATCH_INIT","src","newSrc","String","filter","Boolean","tag","join","anchor","offset","comment","position"],"sources":["withIosGoogleCast.ts"],"sourcesContent":["import { mergeContents } from '@expo/config-plugins/build/utils/generateCode'\nimport {\n  ConfigPlugin,\n  withAppDelegate,\n  withInfoPlist,\n} from '@expo/config-plugins'\nimport { insertContentsInsideSwiftFunctionBlock } from '@expo/config-plugins/build/ios/codeMod'\nconst LOCAL_NETWORK_USAGE =\n  '${PRODUCT_NAME} uses the local network to discover Cast-enabled devices on your WiFi network'\n\n/**\n * On iOS, a dialog asking the user for the local network permission will now be displayed immediately when the app is opened.\n *\n * @param {*} config\n * @param {*} props.receiverAppId If using a custom receiver, make sure to replace `CC1AD845` with your custom receiver app id.\n * @returns\n */\nconst withIosLocalNetworkPermissions: ConfigPlugin<{\n  receiverAppId?: string\n}> = (config, { receiverAppId = 'CC1AD845' } = {}) => {\n  return withInfoPlist(config, (config_) => {\n    if (!Array.isArray(config_.modResults.NSBonjourServices)) {\n      config_.modResults.NSBonjourServices = []\n    }\n    // Add required values\n    config_.modResults.NSBonjourServices.push(\n      '_googlecast._tcp',\n      `_${receiverAppId}._googlecast._tcp`\n    )\n\n    // Remove duplicates\n    config_.modResults.NSBonjourServices = [\n      ...new Set(config_.modResults.NSBonjourServices),\n    ]\n\n    // For iOS 14+, you need to add local network permissions to Info.plist:\n    // https://developers.google.com/cast/docs/ios_sender/ios_permissions_changes#updating_your_app_on_ios_14\n    config_.modResults.NSLocalNetworkUsageDescription =\n      config_.modResults.NSLocalNetworkUsageDescription || LOCAL_NETWORK_USAGE\n    return config_\n  })\n}\n\n// TODO: Use AppDelegate swizzling\nconst withIosAppDelegateLoaded: ConfigPlugin<IosProps> = (config, props) => {\n  return withAppDelegate(config, (config_) => {\n    if (config_.modResults.language === 'swift') {\n      config_.modResults.contents =\n        addSwiftGoogleCastAppDelegateDidFinishLaunchingWithOptions(\n          config_.modResults.contents,\n          props\n        )\n      config_.modResults.contents = addSwiftGoogleCastAppDelegateImport(\n        config_.modResults.contents\n      ).contents\n    } else if (\n      config_.modResults.language === 'objc' ||\n      config_.modResults.language === 'objcpp'\n    ) {\n      config_.modResults.contents =\n        addGoogleCastAppDelegateDidFinishLaunchingWithOptions(\n          config_.modResults.contents,\n          props\n        ).contents\n      config_.modResults.contents = addGoogleCastAppDelegateImport(\n        config_.modResults.contents\n      ).contents\n    }\n\n    return config_\n  })\n}\n\nexport const withIosGoogleCast: ConfigPlugin<{\n  disableDiscoveryAutostart?: boolean\n  expandedController?: boolean\n  receiverAppId?: string\n  startDiscoveryAfterFirstTapOnCastButton?: boolean\n  suspendSessionsWhenBackgrounded?: boolean\n}> = (config, props) => {\n  config = withIosLocalNetworkPermissions(config, {\n    receiverAppId: props.receiverAppId,\n  })\n  config = withIosAppDelegateLoaded(config, {\n    disableDiscoveryAutostart: props.disableDiscoveryAutostart,\n    expandedController: props.expandedController,\n    receiverAppId: props.receiverAppId,\n    startDiscoveryAfterFirstTapOnCastButton:\n    props.startDiscoveryAfterFirstTapOnCastButton,\n    suspendSessionsWhenBackgrounded: props.suspendSessionsWhenBackgrounded,\n  })\n\n  return config\n}\n\n// From expo-cli RNMaps setup\nexport const MATCH_INIT =\n  /-\\s*\\(BOOL\\)\\s*application:\\s*\\(UIApplication\\s*\\*\\s*\\)\\s*\\w+\\s+didFinishLaunchingWithOptions:/g\n\ntype IosProps = {\n  disableDiscoveryAutostart?: boolean\n  expandedController?: boolean\n  receiverAppId?: string | null\n  startDiscoveryAfterFirstTapOnCastButton?: boolean\n  suspendSessionsWhenBackgrounded?: boolean\n}\n\nexport function addGoogleCastAppDelegateDidFinishLaunchingWithOptions(\n  src: string,\n  {\n    disableDiscoveryAutostart = false,\n    expandedController = false,\n    receiverAppId = null,\n    startDiscoveryAfterFirstTapOnCastButton = true,\n    suspendSessionsWhenBackgrounded = true,\n  }: IosProps = {}\n) {\n  let newSrc = []\n  newSrc.push(\n    // For extra safety\n    '#if __has_include(<GoogleCast/GoogleCast.h>)',\n    // TODO: This should probably read safely from a static file like the Info.plist\n    `  NSString *receiverAppID = ${\n      receiverAppId\n        ? `@\"${receiverAppId}\"`\n        : 'kGCKDefaultMediaReceiverApplicationID'\n    };`,\n    '  GCKDiscoveryCriteria *criteria = [[GCKDiscoveryCriteria alloc] initWithApplicationID:receiverAppID];',\n    '  GCKCastOptions* options = [[GCKCastOptions alloc] initWithDiscoveryCriteria:criteria];',\n    `  options.disableDiscoveryAutostart = ${String(!!disableDiscoveryAutostart)};`,\n    `  options.startDiscoveryAfterFirstTapOnCastButton = ${String(\n      !!startDiscoveryAfterFirstTapOnCastButton\n    )};`,\n    `  options.suspendSessionsWhenBackgrounded = ${String(\n      !!suspendSessionsWhenBackgrounded\n    )};`,\n    '  [GCKCastContext setSharedInstanceWithOptions:options];',\n    `  [GCKCastContext sharedInstance].useDefaultExpandedMediaControls = ${String(!!expandedController)};`,\n    '#endif'\n  )\n\n  newSrc = newSrc.filter(Boolean)\n\n  return mergeContents({\n    tag: 'react-native-google-cast-didFinishLaunchingWithOptions',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: MATCH_INIT,\n    offset: 2,\n    comment: '//',\n  })\n}\n\nfunction addGoogleCastAppDelegateImport(src: string) {\n  const newSrc = []\n  newSrc.push(\n    '#if __has_include(<GoogleCast/GoogleCast.h>)',\n    '#import <GoogleCast/GoogleCast.h>',\n    '#endif'\n  )\n\n  return mergeContents({\n    tag: 'react-native-google-cast-import',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /#import \"AppDelegate\\.h\"/,\n    offset: 1,\n    comment: '//',\n  })\n}\n\nfunction addSwiftGoogleCastAppDelegateImport(src: string) {\n  const newSrc = []\n  newSrc.push('#if canImport(GoogleCast)', 'import GoogleCast', '#endif')\n\n  return mergeContents({\n    tag: 'react-native-google-cast-import',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /import React/,\n    offset: 0,\n    comment: '//',\n  })\n}\n\nexport function addSwiftGoogleCastAppDelegateDidFinishLaunchingWithOptions(\n  src: string,\n  {\n    disableDiscoveryAutostart = false,\n    expandedController = false,\n    receiverAppId = null,\n    startDiscoveryAfterFirstTapOnCastButton = true,\n    suspendSessionsWhenBackgrounded = true,\n  }: IosProps = {}\n) {\n  let newSrc = []\n  newSrc.push(\n    // For extra safety\n    '#if canImport(GoogleCast)',\n    `    let receiverAppID = ${\n      receiverAppId\n        ? `\"${receiverAppId}\"`\n        : 'kGCKDefaultMediaReceiverApplicationID'\n    }`,\n    '    let criteria = GCKDiscoveryCriteria(applicationID: receiverAppID)',\n    '    let options = GCKCastOptions(discoveryCriteria: criteria)',\n    `    options.disableDiscoveryAutostart = ${String(!!disableDiscoveryAutostart)}`,\n    `    options.startDiscoveryAfterFirstTapOnCastButton = ${String(\n      !!startDiscoveryAfterFirstTapOnCastButton\n    )}`,\n    `    options.suspendSessionsWhenBackgrounded = ${String(\n      !!suspendSessionsWhenBackgrounded\n    )}`,\n    '    GCKCastContext.setSharedInstanceWith(options)',\n    `    GCKCastContext.sharedInstance().useDefaultExpandedMediaControls = ${String(!!expandedController)}`,\n    '#endif'\n  )\n\n  newSrc = newSrc.filter(Boolean)\n\n  return insertContentsInsideSwiftFunctionBlock(\n    src,\n    'application didFinishLaunchingWithOptions:',\n    newSrc.join('\\n'),\n    { position: 'tailBeforeLastReturn' }\n  )\n}\n"],"mappings":"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","ignoreList":[]}
\ No newline at end of file
diff --git a/node_modules/react-native-google-cast/lib/typescript/plugin/withIosGoogleCast.d.ts b/node_modules/react-native-google-cast/lib/typescript/plugin/withIosGoogleCast.d.ts
index 9099545..d9fd9e4 100644
--- a/node_modules/react-native-google-cast/lib/typescript/plugin/withIosGoogleCast.d.ts
+++ b/node_modules/react-native-google-cast/lib/typescript/plugin/withIosGoogleCast.d.ts
@@ -15,4 +15,5 @@ type IosProps = {
     suspendSessionsWhenBackgrounded?: boolean;
 };
 export declare function addGoogleCastAppDelegateDidFinishLaunchingWithOptions(src: string, { disableDiscoveryAutostart, expandedController, receiverAppId, startDiscoveryAfterFirstTapOnCastButton, suspendSessionsWhenBackgrounded, }?: IosProps): import("@expo/config-plugins/build/utils/generateCode").MergeResults;
+export declare function addSwiftGoogleCastAppDelegateDidFinishLaunchingWithOptions(src: string, { disableDiscoveryAutostart, expandedController, receiverAppId, startDiscoveryAfterFirstTapOnCastButton, suspendSessionsWhenBackgrounded, }?: IosProps): string;
 export {};
